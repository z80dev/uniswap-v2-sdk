{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, ChainId, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  initHash,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  initHash: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    initHash\n  )\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount, CurrencyAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, initHash: INIT_CODE_HASH, tokenA, tokenB })\n  }\n\n  public static getAddressForFactory(tokenA: Token, tokenB: Token, factoryAddress: string, initHash: string): string {\n    return computePairAddress({ factoryAddress, initHash, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount, tokenAmountB: CurrencyAmount) {\n    invariant(currencyAmountA.currency.isToken && tokenAmountB.currency.isToken, 'TOKEN')\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    invariant(tokenAmounts[0].currency.isToken && tokenAmounts[1].currency.isToken, 'TOKEN')\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount, CurrencyAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId | number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    invariant(this.tokenAmounts[0].currency.isToken)\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    invariant(this.tokenAmounts[1].currency.isToken)\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount): [CurrencyAmount, Pair] {\n    invariant(inputAmount.currency.isToken && this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new CurrencyAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount): [CurrencyAmount, Pair] {\n    invariant(outputAmount.currency.isToken && this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.currency).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new CurrencyAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount,\n    tokenAmountA: CurrencyAmount,\n    tokenAmountB: CurrencyAmount\n  ): CurrencyAmount {\n    invariant(totalSupply.currency.isToken && totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts =\n      tokenAmountA.currency.isToken &&\n      tokenAmountB.currency.isToken &&\n      tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n        ? [tokenAmountA, tokenAmountB]\n        : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.isToken && tokenAmounts[1].currency.isToken)\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new CurrencyAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount,\n    liquidity: CurrencyAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.isToken && totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.isToken && liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new CurrencyAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new CurrencyAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId, Currency, ETHER, Price, Token, WETH9 } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n\n  public get midPrice(): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: ChainId | number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const weth: Token | undefined = WETH9[chainId as ChainId]\n\n    invariant(\n      (input.isToken && pairs[0].involvesToken(input)) || (input === ETHER && weth && pairs[0].involvesToken(weth)),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output.isToken && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && weth && pairs[pairs.length - 1].involvesToken(weth)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input.isToken ? input : weth]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId | number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  currencyEquals,\n  ETHER,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  Token,\n  TradeType,\n  WETH9\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): CurrencyAmount {\n  if (currencyAmount.currency.isToken) return currencyAmount\n  if (currencyAmount.currency.isEther) return new CurrencyAmount(WETH9[chainId], currencyAmount.raw)\n  throw new Error('CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency.isToken) return currency\n  if (currency === ETHER) return WETH9[chainId]\n  throw new Error('CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: CurrencyAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = new Route(nextPairs, route.input).midPrice\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return new CurrencyAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return new CurrencyAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = currencyAmountIn.currency.isToken\n      ? currencyAmountIn.currency.chainId\n      : currencyOut.isToken\n      ? currencyOut.chainId\n      : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!currencyEquals(pair.token0, amountIn.currency) && !currencyEquals(pair.token1, amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (currencyEquals(amountOut.currency, tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).raw,\n      this.minimumAmountOut(slippageTolerance).raw\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = currencyAmountOut.currency.isToken\n      ? currencyAmountOut.currency.chainId\n      : currencyIn.isToken\n      ? currencyIn.chainId\n      : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!currencyEquals(pair.token0, amountOut.currency) && !currencyEquals(pair.token1, amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (currencyEquals(amountIn.currency, tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { CurrencyAmount, ETHER, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from 'entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","computePairAddress","factoryAddress","initHash","tokenA","tokenB","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","currency","isToken","invariant","tokenAmounts","liquidityToken","Token","chainId","getAddress","getAddressForFactory","involvesToken","token","equals","this","token0","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","raw","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","Route","pairs","input","output","length","every","pair","weth","WETH9","ETHER","path","entries","currentInput","push","prices","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","currencyEquals","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","wrappedAmount","currencyAmount","isEther","wrappedCurrency","Trade","amount","tradeType","exactQuote","slippage","amounts","Array","nextPairs","TradeType","EXACT_INPUT","i","nextPair","ether","EXACT_OUTPUT","executionPrice","nextMidPrice","midPrice","Percent","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","quotient","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","toString","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","value","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}